package Week7;

import Week7.BinarySearchTree.BTNode;

public class BinaryTree<E> {
	public class Node<E> {							
		protected Node<E> left, right;
		protected E data;
		public Node()	
		{
			left = null;
			right = null;
			data = null;
		}
		public Node(E n)	
		{	
			left = null;
			right = null;
			this.data = n;
		}
		public E getData(){ return data;}
		public Node<E> getRight(){return right; }
		public Node<E> getLeft(){return left;}
	}
	protected Node<E> root;
	public BinaryTree(){ 
		root = null;
	}
	protected BinaryTree(Node<E> root){	
		this.root = root;
	}	

	public BinaryTree(E data, BinaryTree<E> leftTree,BinaryTree<E> rightTree){
		root = new Node<E>(data);
		if(leftTree!=null){ 
			root.left = leftTree.root;}
		else{ 
			root.left = null;
		}
		if(rightTree!=null){ 
			root.right = rightTree.root;
		}
		else{
			root.right = null;
		}
	}
	public void insert(E data){					
		root = insert(root, data); 
	}
	private Node insert(Node node, E data){	
		if (node == null) node = new Node(data);
		else{
			if (node.getRight() == null)
				node.right = insert(node.right, data);
			else node.left = insert(node.left, data);
		}
		return node;
	} 
	public E getData(){
		return root.getData();
	}


}